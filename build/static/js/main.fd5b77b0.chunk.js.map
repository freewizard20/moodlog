{"version":3,"sources":["firebase.js","components/Log/Log.js","components/Stat/VirtualizedList.js","components/Stat/Stat.js","components/SimpleBottomNavigation.js","components/dummy/Stat1.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","useStyles","makeStyles","root","minWidth","minHeight","title","fontSize","color","buttongroup","margin","submit","display","justifyContent","Log","classes","useState","mood","setMood","description","setDescription","handleClick","which","console","log","Card","className","CardContent","Typography","gutterBottom","ButtonGroup","variant","aria-label","Button","onClick","TextField","id","label","multiline","rows","placeholder","value","onChange","e","target","CardActions","alert","collection","add","timestamp","Date","now","then","docRef","catch","error","moodData","theme","width","height","minwidth","maxWidth","marginLeft","backgroundColor","palette","background","paper","renderRow","props","data","index","style","length","ListItem","button","key","ListItemAvatar","Avatar","ListItemText","primary","secondary","toDateString","VirtualizedList","setDidrender","useEffect","orderBy","limit","get","querySnapShot","forEach","doc","obj","push","itemSize","itemCount","bullet","transform","pos","marginBottom","content","Stat","marginTop","SimpleBottomNavigation","React","setValue","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","component","Link","to","Stat1","today","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mQAYAA,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,cACnBC,MAAO,6CAKMR,QAAf,ECHMS,EAAKT,EAASU,YAEdC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,UAAW,KAEbC,MAAO,CACLC,SAAU,GACVC,MAAO,SAETC,YAAa,CACXC,OAAQ,IAEVC,OAAQ,CACNC,QAAS,OACTC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUd,IADY,EAEJe,oBAAU,GAFN,mBAErBC,EAFqB,KAEfC,EAFe,OAGUF,mBAAS,IAHnB,mBAGrBG,EAHqB,KAGRC,EAHQ,KAKtBC,EAAc,SAACC,GACnBJ,EAAQI,GACRC,QAAQC,IAAIF,IAuBd,OACE,kBAACG,EAAA,EAAD,CAAMC,UAAWX,EAAQZ,MACvB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,UAAWX,EAAQT,MACnBE,MAAM,gBACNqB,cAAY,GAHd,gBAOA,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRvB,MAAM,UACNwB,aAAW,iCACXN,UAAWX,EAAQN,aAEnB,kBAACwB,EAAA,EAAD,CACEzB,MAAgB,IAATS,EAAa,YAAc,UAClCiB,QAAS,kBAAMb,EAAY,KAF7B,QAMA,kBAACY,EAAA,EAAD,CACEzB,MAAgB,IAATS,EAAa,YAAc,UAClCiB,QAAS,kBAAMb,EAAY,KAF7B,QAMA,kBAACY,EAAA,EAAD,CACEzB,MAAgB,IAATS,EAAa,YAAc,UAClCiB,QAAS,kBAAMb,EAAY,KAF7B,UAOF,kBAACO,EAAA,EAAD,CACEF,UAAWX,EAAQT,MACnBE,MAAM,gBACNqB,cAAY,GAHd,eAOA,kBAACM,EAAA,EAAD,CACEC,GAAG,4BACHC,MAAM,OACNC,WAAS,EACTC,KAAM,EACNC,YAAY,aACZT,QAAQ,WACRU,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAeuB,EAAEC,OAAOH,WAG7C,kBAACI,EAAA,EAAD,CAAanB,UAAWX,EAAQJ,QAC9B,kBAACsB,EAAA,EAAD,CAAQF,QAAQ,YAAYvB,MAAM,UAAU0B,QA1E7B,YACL,IAAVjB,EAAa6B,MAAM,gBAErB/C,EAAGgD,WAAW,QACXC,IAAI,CACH/B,KAAMA,EACNE,YAAaA,EACb8B,UAAWC,KAAKC,QAEjBC,MAAK,SAAUC,GACd9B,QAAQC,IAAI,6BAA8B6B,EAAOjB,IACjDU,MAAM,wBAGPQ,OAAM,SAAUC,GACfhC,QAAQgC,MAAM,0BAA2BA,QA2D3C,Y,yGCtGFxD,EAAKT,EAASU,YAEdwD,EAAW,GAEXvD,EAAYC,aAAW,SAACuD,GAAD,MAAY,CACvCtD,KAAM,CACJuD,MAAO,OACPC,OAAQ,IACRC,SAAU,IACVC,SAAU,IACVC,WAAY,EACZC,gBAAiBN,EAAMO,QAAQC,WAAWC,WAI9C,SAASC,EAAUC,GACcA,EAAvBC,KADiB,IACXC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,MAErB,OAAID,EAAQd,EAASgB,OACS,GAAxBhB,EAASc,GAAOrD,KAEhB,kBAACwD,EAAA,EAAD,CAAUC,QAAM,EAACH,MAAOA,EAAOI,IAAKL,GAClC,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAACC,EAAA,EAAD,CACEC,QAASvB,EAASc,GAAOnD,YACzB6D,UAAW,IAAI9B,KAAKM,EAASc,GAAOrB,WAAWgC,kBAIpB,GAAxBzB,EAASc,GAAOrD,KAEvB,kBAACwD,EAAA,EAAD,CAAUC,QAAM,EAACH,MAAOA,EAAOI,IAAKL,GAClC,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAACC,EAAA,EAAD,CACEC,QAASvB,EAASc,GAAOnD,YACzB6D,UAAW,IAAI9B,KAAKM,EAASc,GAAOrB,WAAWgC,kBAMnD,kBAACR,EAAA,EAAD,CAAUC,QAAM,EAACH,MAAOA,EAAOI,IAAKL,GAClC,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAACC,EAAA,EAAD,CACEC,QAASvB,EAASc,GAAOnD,YACzB6D,UAAW,IAAI9B,KAAKM,EAASc,GAAOrB,WAAWgC,kBAMhD,qCASI,SAASC,IAAmB,IAAD,EACNlE,qBADM,mBACtBmE,GADsB,WAElCpE,EAAUd,IAuChB,OArCAmF,qBAAU,WACRrF,EAAGgD,WAAW,QACXsC,QAAQ,YAAa,QACrBC,MAAM,IACNC,MACAnC,MAAK,SAAUoC,GACdA,EAAcC,SAAQ,SAAUC,GAC9BnE,QAAQC,IAAIkE,EAAItD,GAAI,OAAQsD,EAAIrB,QAChC,IAAMsB,EAAM,CACVvD,GAAIsD,EAAItD,GACRa,UAAWyC,EAAIrB,OAAOpB,UACtBhC,KAAMyE,EAAIrB,OAAOpD,KACjBE,YAAauE,EAAIrB,OAAOlD,aAE1BqC,EAASoC,KAAKD,MAEhBR,EAAa,QAmBhB,IAEqB,IAApB3B,EAASgB,OACJ,iDAGL,yBAAK9C,UAAWX,EAAQZ,MACtB,kBAAC,IAAD,CACEwD,OAAQ,IACRD,MAAO,IACPmC,SAAU,GACVC,UAAWtC,EAASgB,QAEnBL,IClIX,IAAMlE,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,UAAW,KAEb0F,OAAQ,CACNnF,QAAS,eACTF,OAAQ,QACRsF,UAAW,cAEb1F,MAAO,CACLC,SAAU,GACVC,MAAO,SAETyF,IAAK,CACHC,aAAc,IAEhBzF,YAAa,CACXC,OAAQ,IAEVC,OAAQ,CACNC,QAAS,OACTC,eAAgB,UAElBsF,QAAS,CACPvF,QAAS,OACTC,eAAgB,YAIL,SAASuF,IAAQ,IAAD,EACHpF,mBAAS,IAAIkC,MADV,mBAEvBnC,GAFuB,UAEbd,KAEhB,OACE,kBAACwB,EAAA,EAAD,CAAMC,UAAWX,EAAQZ,MACvB,kBAACwB,EAAA,EAAD,CAAaD,UAAWX,EAAQoF,SAC9B,kBAACjB,EAAD,Q,8BCtCFjF,EAAYC,YAAW,CAC3BC,KAAM,CACJuD,MAAO,IACP2C,UAAW,MAIA,SAASC,IACtB,IAAMvF,EAAUd,IAD+B,EAErBsG,IAAMvF,SAAS,GAFM,mBAExCyB,EAFwC,KAEjC+D,EAFiC,KAI/C,OACE,kBAACC,EAAA,EAAD,CACEhE,MAAOA,EACPC,SAAU,SAACgE,EAAOC,GAChBH,EAASG,IAEXC,YAAU,EACVlF,UAAWX,EAAQZ,MAEnB,kBAAC0G,EAAA,EAAD,CAAwBC,UAAWC,IAAMC,GAAG,IAAI3E,MAAM,QACtD,kBAACwE,EAAA,EAAD,CAAwBC,UAAWC,IAAMC,GAAG,QAAQ3E,MAAM,W,YCrBjD4E,ICGTC,GAAQ,IAAIhE,MAAO+B,eAiBVkC,MAff,WACE,OACE,kBAAC,IAAD,KACE,yBAAKzF,UAAU,OACb,4BAAKwF,GACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,OAAK,EAACP,UAAWhG,IACjC,kBAAC,IAAD,CAAOsG,KAAK,QAAQC,OAAK,EAACP,UAAWV,KAEvC,kBAACE,EAAD,SCRYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEd9E,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAM8E,a","file":"static/js/main.fd5b77b0.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyBc5Lk2SC08FoMgbR0fNg3xxCY1qRX_i9Q\",\n  authDomain: \"moodlog-9c083.firebaseapp.com\",\n  databaseURL: \"https://moodlog-9c083.firebaseio.com\",\n  projectId: \"moodlog-9c083\",\n  storageBucket: \"moodlog-9c083.appspot.com\",\n  messagingSenderId: \"87404538407\",\n  appId: \"1:87404538407:web:bb1ef0b23621ce2dbefc02\",\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport firebase from \"../../firebase\";\n\nconst db = firebase.firestore();\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 400,\n    minHeight: 350,\n  },\n  title: {\n    fontSize: 14,\n    color: \"black\",\n  },\n  buttongroup: {\n    margin: 12,\n  },\n  submit: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default function Log() {\n  const classes = useStyles();\n  const [mood, setMood] = useState(-1);\n  const [description, setDescription] = useState(\"\");\n\n  const handleClick = (which) => {\n    setMood(which);\n    console.log(which);\n  };\n\n  const handleSubmit = () => {\n    if (mood === -1) alert(\"Select mood!\");\n    else {\n      db.collection(\"mood\")\n        .add({\n          mood: mood,\n          description: description,\n          timestamp: Date.now(),\n        })\n        .then(function (docRef) {\n          console.log(\"Document written with ID: \", docRef.id);\n          alert(\"added to database\");\n          // alert(`${mood} ${description}`);\n        })\n        .catch(function (error) {\n          console.error(\"Error adding document: \", error);\n        });\n    }\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Today's Mood\n        </Typography>\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          aria-label=\"contained primary button group\"\n          className={classes.buttongroup}\n        >\n          <Button\n            color={mood === 0 ? \"secondary\" : \"primary\"}\n            onClick={() => handleClick(0)}\n          >\n            Good\n          </Button>\n          <Button\n            color={mood === 1 ? \"secondary\" : \"primary\"}\n            onClick={() => handleClick(1)}\n          >\n            Soso\n          </Button>\n          <Button\n            color={mood === 2 ? \"secondary\" : \"primary\"}\n            onClick={() => handleClick(2)}\n          >\n            Angry\n          </Button>\n        </ButtonGroup>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Description\n        </Typography>\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Text\"\n          multiline\n          rows={4}\n          placeholder=\"Write Here\"\n          variant=\"outlined\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n      </CardContent>\n      <CardActions className={classes.submit}>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n          Submit\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { FixedSizeList } from \"react-window\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport SentimentSatisfiedAltIcon from \"@material-ui/icons/SentimentSatisfiedAlt\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport firebase from \"../../firebase\";\n\nconst db = firebase.firestore();\n\nconst moodData = [];\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: 400,\n    minwidth: 400,\n    maxWidth: 300,\n    marginLeft: 0,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction renderRow(props) {\n  const { data, index, style } = props;\n  //console.log(props);\n  if (index < moodData.length) {\n    if (moodData[index].mood == 0) {\n      return (\n        <ListItem button style={style} key={index}>\n          <ListItemAvatar>\n            <Avatar>\n              <SentimentSatisfiedAltIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={moodData[index].description}\n            secondary={new Date(moodData[index].timestamp).toDateString()}\n          />\n        </ListItem>\n      );\n    } else if (moodData[index].mood == 1) {\n      return (\n        <ListItem button style={style} key={index}>\n          <ListItemAvatar>\n            <Avatar>\n              <SentimentDissatisfiedIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={moodData[index].description}\n            secondary={new Date(moodData[index].timestamp).toDateString()}\n          />\n        </ListItem>\n      );\n    } else {\n      return (\n        <ListItem button style={style} key={index}>\n          <ListItemAvatar>\n            <Avatar>\n              <SentimentVeryDissatisfiedIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={moodData[index].description}\n            secondary={new Date(moodData[index].timestamp).toDateString()}\n          />\n        </ListItem>\n      );\n    }\n  } else {\n    return <></>;\n  }\n}\n\nrenderRow.propTypes = {\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object.isRequired,\n};\n\nexport default function VirtualizedList() {\n  const [didrender, setDidrender] = useState();\n  const classes = useStyles();\n\n  useEffect(() => {\n    db.collection(\"mood\")\n      .orderBy(\"timestamp\", \"desc\")\n      .limit(30)\n      .get()\n      .then(function (querySnapShot) {\n        querySnapShot.forEach(function (doc) {\n          console.log(doc.id, \" // \", doc.data());\n          const obj = {\n            id: doc.id,\n            timestamp: doc.data().timestamp,\n            mood: doc.data().mood,\n            description: doc.data().description,\n          };\n          moodData.push(obj);\n        });\n        setDidrender(1);\n      });\n\n    // db.collection(\"mood\")\n    //   .get()\n    //   .then(function (querySnapshot) {\n    //     querySnapshot.forEach(function (doc) {\n    //       // doc.data() is never undefined for query doc snapshots\n    //       console.log(doc.id, \" => \", doc.data());\n    //       const obj = {\n    //         id: doc.id,\n    //         timestamp: doc.data().timestamp,\n    //         mood: doc.data().mood,\n    //         description: doc.data().description,\n    //       };\n    //       really.push(obj);\n    //     });\n    //     console.log(really);\n    //   });\n  }, []);\n\n  if (moodData.length === 0) {\n    return <h5>Returning data...</h5>;\n  } else {\n    return (\n      <div className={classes.root}>\n        <FixedSizeList\n          height={400}\n          width={300}\n          itemSize={90}\n          itemCount={moodData.length}\n        >\n          {renderRow}\n        </FixedSizeList>\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport \"react-calendar/dist/Calendar.css\";\nimport VirtualizedList from \"./VirtualizedList\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 400,\n    minHeight: 280,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n    color: \"black\",\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  buttongroup: {\n    margin: 12,\n  },\n  submit: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  content: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default function Stat() {\n  const [value, onChange] = useState(new Date());\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.content}>\n        <VirtualizedList />\n      </CardContent>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 400,\n    marginTop: 10,\n  },\n});\n\nexport default function SimpleBottomNavigation() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n      }}\n      showLabels\n      className={classes.root}\n    >\n      <BottomNavigationAction component={Link} to=\"/\" label=\"Log\" />\n      <BottomNavigationAction component={Link} to=\"/stat\" label=\"Stats\" />\n    </BottomNavigation>\n  );\n}\n","import React from \"react\";\n\nfunction Stat1() {\n  return <div>from Stat</div>;\n}\n\nexport default Stat1;\n","import React from \"react\";\nimport \"./App.css\";\nimport Log from \"./components/Log/Log\";\nimport Stat from \"./components/Stat/Stat\";\nimport SimpleBottomNavigation from \"./components/SimpleBottomNavigation\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Log1 from \"./components/dummy/Log1\";\nimport Stat1 from \"./components/dummy/Stat1\";\n\nconst today = new Date().toDateString();\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <h3>{today}</h3>\n        <Switch>\n          <Route path=\"/\" exact component={Log} />\n          <Route path=\"/stat\" exact component={Stat} />\n        </Switch>\n        <SimpleBottomNavigation />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}